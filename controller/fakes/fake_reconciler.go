// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/aclevername/config-map-controller/controller"
	v1 "k8s.io/api/core/v1"
)

type FakeReconciler struct {
	ReconcileResourceStub        func(*v1.ConfigMap) error
	reconcileResourceMutex       sync.RWMutex
	reconcileResourceArgsForCall []struct {
		arg1 *v1.ConfigMap
	}
	reconcileResourceReturns struct {
		result1 error
	}
	reconcileResourceReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReconciler) ReconcileResource(arg1 *v1.ConfigMap) error {
	fake.reconcileResourceMutex.Lock()
	ret, specificReturn := fake.reconcileResourceReturnsOnCall[len(fake.reconcileResourceArgsForCall)]
	fake.reconcileResourceArgsForCall = append(fake.reconcileResourceArgsForCall, struct {
		arg1 *v1.ConfigMap
	}{arg1})
	fake.recordInvocation("ReconcileResource", []interface{}{arg1})
	fake.reconcileResourceMutex.Unlock()
	if fake.ReconcileResourceStub != nil {
		return fake.ReconcileResourceStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.reconcileResourceReturns
	return fakeReturns.result1
}

func (fake *FakeReconciler) ReconcileResourceCallCount() int {
	fake.reconcileResourceMutex.RLock()
	defer fake.reconcileResourceMutex.RUnlock()
	return len(fake.reconcileResourceArgsForCall)
}

func (fake *FakeReconciler) ReconcileResourceCalls(stub func(*v1.ConfigMap) error) {
	fake.reconcileResourceMutex.Lock()
	defer fake.reconcileResourceMutex.Unlock()
	fake.ReconcileResourceStub = stub
}

func (fake *FakeReconciler) ReconcileResourceArgsForCall(i int) *v1.ConfigMap {
	fake.reconcileResourceMutex.RLock()
	defer fake.reconcileResourceMutex.RUnlock()
	argsForCall := fake.reconcileResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReconciler) ReconcileResourceReturns(result1 error) {
	fake.reconcileResourceMutex.Lock()
	defer fake.reconcileResourceMutex.Unlock()
	fake.ReconcileResourceStub = nil
	fake.reconcileResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeReconciler) ReconcileResourceReturnsOnCall(i int, result1 error) {
	fake.reconcileResourceMutex.Lock()
	defer fake.reconcileResourceMutex.Unlock()
	fake.ReconcileResourceStub = nil
	if fake.reconcileResourceReturnsOnCall == nil {
		fake.reconcileResourceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.reconcileResourceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeReconciler) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.reconcileResourceMutex.RLock()
	defer fake.reconcileResourceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReconciler) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controller.Reconciler = new(FakeReconciler)
